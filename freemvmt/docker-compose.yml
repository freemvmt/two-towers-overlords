services:
  backend:
    build: ./backend
    container_name: backend
    expose:
      - ${API_PORT}
    ports:
      - "${API_PORT}:8000"
    environment:
      - REDIS_URL=${REDIS_URL}
      - MODEL_PATH=${MODEL_PATH}
      - PROJECTION_DIM=${PROJECTION_DIM}
      - TOKENIZERS_PARALLELISM=false
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models:ro
    networks: [two-towers]

  frontend:
    build: ./frontend
    container_name: frontend
    expose:
      - ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:8501"
    environment:
      - API_URL="http://backend:${FRONTEND_PORT}""
    depends_on: [backend]
    networks: [two-towers]

  redis:
    image: redis/redis-stack-server:7.4.0-v5
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [two-towers]

networks:
  two-towers:
    driver: bridge

volumes:
  redis_data:
