services:
  backend:
    build: ./backend
    container_name: backend
    # expose the backend to linked services in same docker network, but not to host machine
    expose:
      - ${BACKEND_PORT}
    environment:
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    networks: [two-towers]

  frontend:
    build: ./frontend
    container_name: frontend
    expose:
      - ${FRONTEND_PORT}
    depends_on: [backend]
    networks: [two-towers]

  db:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    # we do expose the db to the host so we can connect to it and query the data (e.g via pgAdmin)
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks: [two-towers]

  redis:
    image: redis:8.0.2-bookworm
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks: [two-towers]

networks:
  mnist-net:
    driver: bridge

volumes:
  caddy_config:
  caddy_data:
  pgdata:
